.content{
    max-width: min(112rem, 90%);
}

#room header{
    width: 100%;
    display: flex;
    align-items: center; /* vertical */
    justify-content: space-between; /* horizontal between coloca espaços entre os elementos, isso quer dizer, espaço entre, space, espaço, betwwen entre */
}

#room header .buttons{
    display: flex;
}

#room header .buttons .button:nth-child(1){
    margin-right: 0.8rem;
    padding: 1.3rem 1.6rem;
}

#room header .buttons .button:nth-child(1) img{
    margin-left: 1rem;
    width: 2rem;
    height: 2rem;
}

#room header .buttons .button:nth-child(2){
    padding: 1.3rem 3.2rem;
}


#room header .buttons .button:nth-child(2) img{
    width: 2rem;
    height: 2rem;
}

/*** Question form  ***/

#question-form h2{
    color: var(--black);
    font-weight: 700;
    font-family: 'Poppins', sans-serif;
    font-size: 2.8rem;
    line-height: 4.2rem;
    margin-bottom: 2.4rem;
}

#question-form form{
    padding: 1.6rem;
    border: .2rem solid var(--grey-blue);
    border-radius: 0rem .8rem .8rem .8rem;
    margin-bottom: 1.6rem;
}

#question-form form textarea{
    resize: none;
    background: transparent; /* com essa duas propriedas a gente tira aquele "quadradinho" do text area, q fazia com q a gente aumentasse ou diminuisse o text area */
    width: 100%;
    outline: none; /* serve para tirar o quadrado (a borda) preto em volta do textarea */
}

#question-form form textarea::placeholder{
    color: var(--grey-blue);
}

#question-form form footer{
    display: flex;
    align-items: center;
    justify-content: space-between;
}


#question-form form footer > div{ /* esse simbolo > quer dizer, q eu quero pegar as divs, que são filhas de footer, ou seja, as divs q veem direto dps de footer, por ex, se eu criar uma div, dentro da minha div q está no footer, sem aquele simbolo ele vai dar o estilo para essas duas divs, com o simbolo, ele vai pegar somente a div filha de footer, a gente só quer pegar as filhas diretas de footer, e não as divs q são netas de footer, ai por ex, essa div neta, tbm entra no display flex, ai caga tudo com o layout */
    color: var(--icons-details);
    font-family: 'Poppins', sans-serif;
    font-weight: 400;
    font-size: 1.4rem; 
    display: flex;
    align-items: center;
}

#question-form form footer > div img{
    margin-right: .9rem;
}

#question-form form footer button{
    height: auto;
    padding: .8rem 2.4rem;
    line-height: 2.4rem;
}

/******* questions *******/

.question-wrapper{
    background: var(--light-blue);
    margin-bottom: .8rem;
    padding: 2.4rem;
    border-radius: 0 .8rem .8rem .8rem;
}

.question-wrapper .questions-content{
    display: flex;
    align-items: flex-start; /* ao inves de alinhar no centro, como o align items é na vertical, a gente deixa flex start para ele deixar alinhado ao topo */
    /* ai para q todo o resto do conteúdo n fique pra cima (por ex os páragrafos das perguntas, eles ficam pra cima do icone de ususario e fica feioa) para q isso na aconteça, colocamos um display flex no próprio p */
}

.question-wrapper .questions-content .user{
    clip-path: circle();
    /* width: 5.2rem;
    height: 5.2rem; */
    /* n precisamos colocar as medidas das bolinhas, pq vamos colocar um padding q o nosso conteúdo precisa ter, e esse padding já deixa a bolinha do tamanho certo */
    background: var(--blue);
    padding: 1.4rem;
}

.question-wrapper .questions-content p{
    margin-left: 1.6rem;
    /* agr vamos usar o css para fazermos com q, se o parágrafo for maior q uma linha, ele n fique feio na tela, fique sempre alinhado com o topo da nossa imagem de usuario */
    word-break: break-word; /* isso aq faz com q se vc escreva uma palavra muito grande ele n quebre o layout, estamos falando de uma palavra, e não uma frase, então se tiver uma palavra muito grande, normalmente ele n iria quebrar, mas com isso ele quebra a palavra se chega no limite, fazendo com q o layout fique certinho, e a palavra não saia da nossa tela, da nossa div, do layout e etc */
    display: flex;
    align-items: center;
    /* com o display flex e align itens, fazemos com q todo o conteúdo de p fique alinhado ao meio aumentando o seu tamanho, ou seja, quando aumentamos o tamanho onde o conteúdo de p pode ficar, ele vai sempre alinhar ao meio, se n aumentarmos o conteúdo de p, ele vai ficar pra cima do icone de user, pq o conteúdo dele é somente a tag p, então automaticamente ele já está alinhado ao meio, porém quando aumentamos o tamanho do conteúdo de p com o height, ele vai alinhar ao meio, e ai sim vai ficar no meio do nosso icone de usuario */
    min-height: 5.5rem; /* usamos o min height para q frases q estejam maiores, não quebrem o layout, como estamos falando em minimo de altura, não tem perigo de um texto grande ir para cima e quebrar o nosso layout, o texto grande vai ficar sempre no topo junto com o icone, por ex, se eu setar um height fixo, ele vai tentar encaixar o p exatamente no meio desse conteúdo, por causa do align itens, e como ele tenta encaixar esse p, em um conteúdo que é muito pequeno, esse conteúdo sobe muito para tentar se encaixar nesse espaço, e acabe quebrando o layout, por isso usamos o min height, para q ele tenha sempre uma altura, minima, e n corra esse perigo de ser uma altura tão pequena q a frase n caiba no conteúdo e quebre o layout */
} 

.question-wrapper .actions{
    display: flex;
    align-items: center;
    justify-content: flex-end;
}

.question-wrapper .actions > a{
    display: flex;
    align-items: center;
}

/* .question-wrapper .actions .check{
    margin-right: 2.4rem;
} posso fazer dessa forma  */

/* ou posso fazer dessa forma, aq estou selecionando a penas o segundo filho da tag a para aplicar isso, pq se eu aplicar nos dois filhos, os dois filhos terão margens a esquerda, e o primeiro filho n precisa de margem a esquerda, ele vira um css desnecessário, e muito css desnecessario pode fazer com a nossa pagina carregue mais devagar, por isso é bom fazer isso */
/* .question-wrapper .actions > a:nth-child(2){
    margin-left: 2.4rem;
} */

/* posso fazer dessa forma tbm, oq esse faz? ele pega o irmão, ou seja, .question-wrapper .actions > a isso aq é meu seletor, porém o + a, faz com q eu pegue o irmão desse seletor, ou seja? o segundo a, basicamente ele fala assim, selecionsa esse cara pra mim .question-wrapper .actions > a e pega o irmão dele + a  */
.question-wrapper .actions > a + a{
    margin-left: 2.4rem;
}

.question-wrapper .actions .delete{
    margin-right: .8rem;
}

.question-wrapper .actions > a > img{
    margin-right: .8rem;
}

/***** question read ******/

/* vamos colocar usando javascript, uma clase "read" no nosso html, quando uma pergunta estiver sido marcada como lida */
/* quandoe sse read existir, ele vai pegar o css da nossa classe e aplicar, quando esse read n existir, ele não vai aplicar o css dessa classe */
.question-wrapper.read{
    background: var(--grey-medium);
    /* a cor desse background é a grey dark, porém como a gente n consegue colocar uma opacidade pra ela, sem q afete o conteúdo do nossos questions wrapper a gente colocou outra cor, já com a opacidade certa */
    /* para colocar essa cor nova, podemos mexer direto na opacidade da nossa cor criando uma nova cor, porém ai temos q ir no olhometro, então n é muito confiável, ou ir em inspecionar no navegador, criar uma nova cor (pode ser qualquer cor msm) e quando clicamos em cima da cor, ganhamos uma lupinha, é com essa lupinha q clicamos na cor exata q queremos, e ele nos da o código hexadecimal exato já com a opacidade */
}

.question-wrapper.read .questions-content .user{
    background: var(--grey-blue);
}

/******  No questions  ******/
.no-questions{
    text-align: center;
    margin-top: 5.2rem;
}

.no-questions img {
    max-width: 100%; /* pra imagem n crescer mais q 100% */
    margin-bottom: 1.2rem;
}

.no-questions p{
    font-family: 'Poppins', sans-serif;
    font-size: 1.8rem;
    font-weight: 600;
    color: var(--black);
}

/* aq estamos pegando o p irmão de p */
.no-questions p + p{
    font-family: 'Open Sans', sans-serif;
    font-size: 1.4rem;
    font-weight: 400;
    margin-top: 1.3rem;
    line-height: 1.9rem;
    color: var(--grey-dark);
}